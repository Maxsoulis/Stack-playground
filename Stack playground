// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
#define MAX 10
struct stack{
    int items[MAX];
    int size;
    int top; 
    stack( int size){
        this->size = size;
        
    }
};
typedef stack st;
void createNewStack(st* s){
    s->top = -1;
}
int checkIsFull(st* s){
    if(s->top == MAX - 1){
        return 1;
    }
    return 0;
}
int checkIsEmpty(st* s){
    if(s->top == -1){
        return 1;
    }
    return 0;
}
void push(st* s, int newItem){
    if(checkIsFull(s)){
        cout << "Stack is full" << '\n';
        return;
    }
    else{
        s->top++;
        s->items[s->top] = newItem;
    }
    s->size++;
}
void pop(st* s){
    if(checkIsEmpty(s)){
        cout << "Stack is empty" << '\n';
    }
    else{
        cout << "Item popped" << s->items[s->top];
        s->top--;
    }
    s->size --;
}
void printStack(st* s){
    for(int i = 0; i < s->size; i++){
        cout << s->items[i] << " ";
    }
}
void searchStack(st* s, int itemToSearch){
    int position = 0;
    while (position != MAX - 1){
        if(s->items[position] == itemToSearch){
            cout << itemToSearch << " found at " << position << '\n';
            return;
        }
        position++;
    }
    cout << itemToSearch << " not found" << '\n';
}
int main() {
    // Write C++ code here
    stack *s = new stack(0);
    
    createNewStack(s);
    push(s, 12);
    push(s, 23);
    push(s, 42);
    push(s, 1);
    cout << "Before removing item" << '\n';
    printStack(s);
    pop(s);
    cout << "After removing item" << '\n';
    printStack(s);
    searchStack(s, 42);
    int empty = checkIsFull(s);
    
    return 0;
}
